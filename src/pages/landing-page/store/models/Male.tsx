/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 male.glb -t -T
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    male2003: THREE.Mesh;
    male2003_1: THREE.Mesh;
    male2003_2: THREE.Mesh;
    male2003_3: THREE.Mesh;
    male2003_4: THREE.Mesh;
    male2003_5: THREE.Mesh;
    male2003_6: THREE.Mesh;
    male2003_7: THREE.Mesh;
    male2003_8: THREE.Mesh;
    male2003_9: THREE.Mesh;
    male2003_10: THREE.Mesh;
    male2003_11: THREE.Mesh;
    male2003_12: THREE.Mesh;
    male2003_13: THREE.Mesh;
    male2003_14: THREE.Mesh;
    male2003_15: THREE.Mesh;
    male2003_16: THREE.Mesh;
    male2003_17: THREE.Mesh;
    male2003_18: THREE.Mesh;
    male2003_19: THREE.Mesh;
  };
  materials: {
    ["Base_texture_FRONT_2386.003"]: THREE.MeshStandardMaterial;
    ["Laces_FRONT_2374.003"]: THREE.MeshStandardMaterial;
    ["pants_FRONT_503500.002"]: THREE.MeshStandardMaterial;
    SKIN: THREE.MeshStandardMaterial;
  };
};

export default function Male(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/male-transformed.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.male2003.geometry}
          material={materials["Base_texture_FRONT_2386.003"]}
        />
        <mesh
          geometry={nodes.male2003_1.geometry}
          material={materials["Laces_FRONT_2374.003"]}
        />
        <mesh
          geometry={nodes.male2003_2.geometry}
          material={materials["Laces_FRONT_2374.003"]}
        />
        <mesh
          geometry={nodes.male2003_3.geometry}
          material={materials["pants_FRONT_503500.002"]}
        />
        <mesh geometry={nodes.male2003_4.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_5.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_6.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_7.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_8.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_9.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_10.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_11.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_12.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_13.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_14.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_15.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_16.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_17.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_18.geometry} material={materials.SKIN} />
        <mesh geometry={nodes.male2003_19.geometry} material={materials.SKIN} />
      </group>
    </group>
  );
}

useGLTF.preload("/male-transformed.glb");
